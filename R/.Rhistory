suppressMessages(library(scDD))
suppressMessages(library(locfdr))
suppressMessages(library(Seurat))
suppressMessages(library(extraDistr))
suppressMessages(library(BiocParallel))
suppressMessages(library(SingleCellExperiment))
source("../functions/mrf_functions.R")
source("../functions/sim_functions.R")
load("../data/cell_cell.RData")
load("../data/gene_exp_params.RData")
alpha_inf = gene_exp_params$alpha_inf
beta_inf = gene_exp_params$beta_inf
alpha_disp = gene_exp_params$alpha_disp
beta_disp = gene_exp_params$beta_disp
alpha_mean = gene_exp_params$alpha_mean
beta_mean = gene_exp_params$beta_mean
n_gene = 200
n_cell = 18
rate = 0.4
taus = c(2, 1/2)
de_proportion = 0.2
g_g = matrix(1, n_gene, n_gene)
conn = rbinom(sum(lower.tri(g_g)), 1, rate)
g_g[lower.tri(g_g)] = conn
g_g <- t(g_g)
g_g[lower.tri(g_g)] = conn
diag(g_g) = 0
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(10, 0.2, 0.05))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
random.seed = 2021
.libPaths("/gpfs/loomis/pi/zhao2/hl732/R_pkgs")
suppressMessages(library(pscl))
suppressMessages(library(scDD))
suppressMessages(library(locfdr))
suppressMessages(library(Seurat))
suppressMessages(library(extraDistr))
suppressMessages(library(BiocParallel))
suppressMessages(library(SingleCellExperiment))
source("../functions/mrf_functions.R")
source("../functions/sim_functions.R")
load("../data/cell_cell.RData")
load("../data/gene_exp_params.RData")
alpha_inf = gene_exp_params$alpha_inf
beta_inf = gene_exp_params$beta_inf
alpha_disp = gene_exp_params$alpha_disp
beta_disp = gene_exp_params$beta_disp
alpha_mean = gene_exp_params$alpha_mean
beta_mean = gene_exp_params$beta_mean
n_gene = 200
n_cell = 18
rate = 0.4
taus = c(2, 1/2)
de_proportion = 0.2
g_g = matrix(1, n_gene, n_gene)
conn = rbinom(sum(lower.tri(g_g)), 1, rate)
g_g[lower.tri(g_g)] = conn
g_g <- t(g_g)
g_g[lower.tri(g_g)] = conn
diag(g_g) = 0
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(10, 0.2, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(5, 0.2, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(5, 0.5, 0.5))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(10, 0.5, 0.5))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(10, 0.2, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(6, 0.2, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(8, 0.2, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(9, 0.2, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(9, 0.3, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(10, 0.3, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(12, 0.3, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(13, 0.3, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(15, 0.4, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(20, 0.4, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(20, 0.5, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(25, 0.5, 0.2))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(25, 0.5, 0.25))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(25, 0.6, 0.25))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(30, 0.6, 0.3))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
c_c = cell_cell
res = initialization(de_proportion, c_c, g_g, paraMRF = c(25, 0.6, 0.3))
statesI = res[[1]]
states = res[[2]]
sum(states)
sum(statesI)
random.seed = 2021
.libPaths("/gpfs/loomis/pi/zhao2/hl732/R_pkgs")
suppressMessages(library(pscl))
suppressMessages(library(scDD))
suppressMessages(library(locfdr))
suppressMessages(library(Seurat))
suppressMessages(library(extraDistr))
suppressMessages(library(BiocParallel))
suppressMessages(library(SingleCellExperiment))
source("../functions/mrf_functions.R")
source("../functions/sim_functions.R")
load("../data/cell_cell.RData")
load("../data/gene_exp_params.RData")
alpha_inf = gene_exp_params$alpha_inf
beta_inf = gene_exp_params$beta_inf
alpha_disp = gene_exp_params$alpha_disp
beta_disp = gene_exp_params$beta_disp
alpha_mean = gene_exp_params$alpha_mean
beta_mean = gene_exp_params$beta_mean
n_gene = 200
n_cell = 18
rate = 0.4
taus = c(2, 1/2)
de_proportion = 0.2
g_g = matrix(1, n_gene, n_gene)
conn = rbinom(sum(lower.tri(g_g)), 1, rate)
g_g[lower.tri(g_g)] = conn
g_g <- t(g_g)
g_g[lower.tri(g_g)] = conn
diag(g_g) = 0
# c_c = cell_cell
# res = initialization(de_proportion, c_c, g_g, paraMRF = c(25, 0.6, 0.3))
# statesI = res[[1]]
# states = res[[2]]
# sum(states)
# sum(statesI)
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(25, 0.6, 0.3), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
expression_mat = sim_data$expression_mat
n_group = sim_data$n_group
n_sample = sim_data$n_sample
n_gene = sim_data$n_gene
n_cell = sim_data$n_cell
g_g = sim_data$g_g
c_c = sim_data$c_c
exp_raw = expression_mat
exp_wide = NULL
for (i in 1:n_group) {
for (j in 1:n_cell) {
exp_wide = cbind(exp_wide, t(exp_raw[i,,,j]))
}
}
colnames(exp_wide) = seq(1, n_group*n_sample*n_cell)
rownames(exp_wide) = seq(1, n_gene)
cell_names = c(rep(paste0("CONT_", 1:n_cell), each = n_sample),
rep(paste0("CASE_", 1:n_cell), each = n_sample))
meta = data.frame(cell.ident = cell_names)
rownames(meta) = seq(1, n_group*n_sample*n_cell)
mydata = CreateSeuratObject(counts = exp_wide, meta.data = meta)
Idents(mydata) = mydata$cell.ident
zz = array(NA, dim = c(1, n_gene, n_cell))
for (g in 1:n_gene) {
for (c in 1:n_cell) {
zz[1,g,c] = qnorm(pt(t.test(expression_mat[1,,g,c], expression_mat[2,,g,c])$statistic,
df = sum(length(expression_mat[1,,g,c]), length(expression_mat[2,,g,c]))))
}
}
MRF_results = getMRFDE_t_stats(zz, n_cell, n_gene, c_c, g_g,
nulltype = 1, df = 15, iterEM = 20,
iterGibbsPost = 100, brPost = 50)
MRF_results
get_posterior_threshold = function(data, alpha = 0.05) {
q_sorted = sort(1-data, decreasing = F)
index = which.min((cumsum(q_sorted)/seq(1, length(data), by = 1) <= alpha) == TRUE)
posterior.threshold = 1 - q_sorted[index]
}
get_MRF_tpr.tnr.fdr.auc = function(data, results, alpha = 0.05) {
expression_mat = data$expression_mat
n_group = data$n_group
n_sample = data$n_sample
n_gene = data$n_gene
n_cell = data$n_cell
g_g = data$g_g
c_c = data$c_c
states_true = data$states
res = matrix(results, nrow = dim(results)[2], ncol = dim(results)[3])
posterior_threshold_vec = apply(res, 2, get_posterior_threshold)
states_pred_mat = matrix(NA, nrow = nrow(res), ncol = ncol(res))
for (i in 1:ncol(states_pred_mat)) { states_pred_mat[,i] = as.numeric(res[,i] >= posterior_threshold_vec[i]) }
states_pred = array(states_pred_mat, dim = c(1, nrow(states_pred_mat), ncol(states_pred_mat)))
states_pred_fac = ifelse(states_pred == 1, "A", "B")
states_true_fac = ifelse(states_true == 1, "A", "B")
# TPR
TPR = sensitivity(factor(states_pred_fac), factor(states_true_fac))
# TNR
TNR = specificity(factor(states_pred_fac), factor(states_true_fac))
# FDR
FDR = 1 - posPredValue(factor(states_pred_fac), factor(states_true_fac))
# ROC AUC
ROC = roc(states_true, states_pred, quiet = TRUE)
AUC = as.numeric(auc(ROC))
# Results
results = c(TPR = TPR, TNR = TNR, FDR = FDR, AUC = AUC)
return(results)
}
get_MRF_tpr.tnr.fdr.auc(sim_data, MRF_results)
get_MRF_tpr.tnr.fdr.auc(sim_data, MRF_results$postDE)
library(caret)
library(pROC)
get_MRF_tpr.tnr.fdr.auc(sim_data, MRF_results$postDE)
states_pred
data = sim_data
results = MRF_results$postDE
expression_mat = data$expression_mat
n_group = data$n_group
n_sample = data$n_sample
n_gene = data$n_gene
n_cell = data$n_cell
g_g = data$g_g
c_c = data$c_c
states_true = data$states
res = matrix(results, nrow = dim(results)[2], ncol = dim(results)[3])
posterior_threshold_vec = apply(res, 2, get_posterior_threshold)
states_pred_mat = matrix(NA, nrow = nrow(res), ncol = ncol(res))
for (i in 1:ncol(states_pred_mat)) { states_pred_mat[,i] = as.numeric(res[,i] >= posterior_threshold_vec[i]) }
states_pred = array(states_pred_mat, dim = c(1, nrow(states_pred_mat), ncol(states_pred_mat)))
states_pred
dim(states_pred)
states_pred_mat
get_MRF_tpr.tnr.fdr.auc = function(data, results, alpha = 0.05) {
expression_mat = data$expression_mat
n_group = data$n_group
n_sample = data$n_sample
n_gene = data$n_gene
n_cell = data$n_cell
g_g = data$g_g
c_c = data$c_c
res = matrix(results, nrow = dim(results)[2], ncol = dim(results)[3])
posterior_threshold_vec = apply(res, 2, get_posterior_threshold)
DE_states = matrix(NA, nrow = nrow(res), ncol = ncol(res))
for (i in 1:ncol(DE_states)) { DE_states[,i] = as.numeric(res[,i] >= posterior_threshold_vec[i]) }
return(DE_states)
}
get_MRF_tpr.tnr.fdr.auc(sim_data, MRF_results$postDE)
sim_data
sim_data$expression_mat
sim_data$n_gene
sim_data$n_cell
sim_data$g_g
rownames(sim_data$g_g) = paste0("G", seq(1,200))
sim_data$g_g
colnames(sim_data$g_g) = paste0("G", seq(1,200))
rownames(sim_data$g_g) = paste0("G", seq(1,200))
colnames(sim_data$g_g) = paste0("G", seq(1,200))
rownames(sim_data$c_c) = paste0("G", seq(1,18))
colnames(sim_data$c_c) = paste0("G", seq(1,18))
expression_mat
data_example = list(expression_mat = sim_data$expression_mat,
gene_gene = sim_data$g_g,
cell_cell = sim_data$c_c)
save(data_example, file = "data_example.RData")
setwd("~/Documents/GitHub/MRFscRNAseq/R")
devtools::document()
load("../../data_example.RData")
devtools::use_data(data_example)
usethis::use_data(data_example)
data = MRFscRNAseq::data_example
devtools::document()
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
library(devtools)
install_github("eddiehli/MRFscRNAseq", quiet = TRUE)
install_github("eddiehli/MRFscRNAseq", quiet = TRUE)
install_github("eddiehli/MRFscRNAseq", quiet = TRUE, force = T)
library(MRFscRNAseq)
?get_DE_MRF()
data = MRFscRNAseq::data_example
data$g_g[100:110, 100:110]
data$gene_gene[1:10, 1:10]
devtools::document()
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
library(devtools)
install_github("eddiehli/MRFscRNAseq", quiet = TRUE, force = T)
library(MRFscRNAseq)
?get_DE_MRF()
data = MRFscRNAseq::data_example
data$gene_gene[1:10, 1:10]
zz = MRFscRNAseq::get_z_scores(data)
zz
zz = MRFscRNAseq::get_z_scores(data)
gene_gene = data$gene_gene
cell_cell = data$cell_cell
results = get_DE_MRF = function(zz, gene_gene, cell_cell,
iterEM = 20, iterGibbsPost = 200, brPost = 100)
f/
./
s.fd
;fa
data = MRFscRNAseq::data_example
data$gene_gene[1:10, 1:10]
zz = MRFscRNAseq::get_z_scores(data)
gene_gene = data$gene_gene
cell_cell = data$
```
results = get_DE_MRF(zz, gene_gene, cell_cell,
iterEM = 20, iterGibbsPost = 200, brPost = 100)
data = MRFscRNAseq::data_example
data$gene_gene[1:10, 1:10]
zz = MRFscRNAseq::get_z_scores(data)
gene_gene = data$gene_gene
cell_cell = data$cell_cell
results = get_DE_MRF(zz, gene_gene, cell_cell,
iterEM = 20, iterGibbsPost = 200, brPost = 100)
results
get_DE = function(results, alpha = 0.05) {
res = matrix(results, nrow = dim(results)[2], ncol = dim(results)[3])
posterior_threshold_vec = apply(res, 2, get_posterior_threshold, alpha = 0.05)
DE_states = matrix(NA, nrow = nrow(res), ncol = ncol(res))
for (i in 1:ncol(DE_states)) { DE_states[,i] = as.numeric(res[,i] >= posterior_threshold_vec[i]) }
return(DE_states)
}
get_posterior_threshold = function(data, alpha = 0.05) {
q_sorted = sort(1-data, decreasing = F)
index = which.min((cumsum(q_sorted)/seq(1, length(data), by = 1) <= alpha) == TRUE)
posterior.threshold = 1 - q_sorted[index]
}
get_DE(results$postDE)
sum(get_DE(results$postDE))
get_DE = function(results, alpha = 0.05) {
res = matrix(results, nrow = dim(results)[2], ncol = dim(results)[3])
posterior_threshold_vec = apply(res, 2, get_posterior_threshold, alpha = 0.01)
DE_states = matrix(NA, nrow = nrow(res), ncol = ncol(res))
for (i in 1:ncol(DE_states)) { DE_states[,i] = as.numeric(res[,i] >= posterior_threshold_vec[i]) }
return(DE_states)
}
get_posterior_threshold = function(data, alpha = 0.05) {
q_sorted = sort(1-data, decreasing = F)
index = which.min((cumsum(q_sorted)/seq(1, length(data), by = 1) <= alpha) == TRUE)
posterior.threshold = 1 - q_sorted[index]
}
sum(get_DE(results$postDE))
get_DE = function(results, alpha = 0.05) {
res = matrix(results, nrow = dim(results)[2], ncol = dim(results)[3])
posterior_threshold_vec = apply(res, 2, get_posterior_threshold, alpha = alpha)
DE_states = matrix(NA, nrow = nrow(res), ncol = ncol(res))
for (i in 1:ncol(DE_states)) { DE_states[,i] = as.numeric(res[,i] >= posterior_threshold_vec[i]) }
return(DE_states)
}
get_posterior_threshold = function(data, alpha = alpha) {
q_sorted = sort(1-data, decreasing = F)
index = which.min((cumsum(q_sorted)/seq(1, length(data), by = 1) <= alpha) == TRUE)
posterior.threshold = 1 - q_sorted[index]
}
sum(get_DE(results$postDE))
get_DE = function(results, alpha = 0.01) {
res = matrix(results, nrow = dim(results)[2], ncol = dim(results)[3])
posterior_threshold_vec = apply(res, 2, get_posterior_threshold, alpha = alpha)
DE_states = matrix(NA, nrow = nrow(res), ncol = ncol(res))
for (i in 1:ncol(DE_states)) { DE_states[,i] = as.numeric(res[,i] >= posterior_threshold_vec[i]) }
return(DE_states)
}
get_posterior_threshold = function(data, alpha = alpha) {
q_sorted = sort(1-data, decreasing = F)
index = which.min((cumsum(q_sorted)/seq(1, length(data), by = 1) <= alpha) == TRUE)
posterior.threshold = 1 - q_sorted[index]
}
sum(get_DE(results$postDE))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
data = MRFscRNAseq::data_example
data$gene_gene[1:10, 1:10]
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
library(devtools)
install_github("eddiehli/MRFscRNAseq", quiet = TRUE, force = T)
library(MRFscRNAseq)
?get_DE_MRF()
data = MRFscRNAseq::data_example
data$gene_gene[1:10, 1:10]
zz = MRFscRNAseq::get_z_scores(data)
gene_gene = data$gene_gene
cell_cell = data$cell_cell
MRF_Results = get_DE_MRF(zz, gene_gene, cell_cell,
iterEM = 10, iterGibbsPost = 100, brPost = 50)
MRFscRNAseq::get_DE_results(MRF_Results)
MRF_Results
devtools::document()
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
library(devtools)
install_github("eddiehli/MRFscRNAseq", quiet = TRUE, force = T)
library(MRFscRNAseq)
?get_DE_MRF()
data = MRFscRNAseq::data_example
data$gene_gene[1:10, 1:10]
zz = MRFscRNAseq::get_z_scores(data)
gene_gene = data$gene_gene
cell_cell = data$cell_cell
MRF_Results = get_DE_MRF(zz, gene_gene, cell_cell,
iterEM = 10, iterGibbsPost = 100, brPost = 50)
MRFscRNAseq::get_DE_results(MRF_Results)
remove.packages("MRFscRNAseq")
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
library(devtools)
install_github("eddiehli/MRFscRNAseq", quiet = TRUE, force = T)
library(MRFscRNAseq)
?get_DE_MRF()
data = MRFscRNAseq::data_example
data$gene_gene[1:10, 1:10]
zz = MRFscRNAseq::get_z_scores(data)
gene_gene = data$gene_gene
cell_cell = data$cell_cell
MRF_Results = get_DE_MRF(zz, gene_gene, cell_cell,
iterEM = 10, iterGibbsPost = 100, brPost = 50)
MRF_Results$paraVar
MRF_Results$postDE
?get_DE_MRF
