n_sample = sim_data$n_sample
n_gene = sim_data$n_gene
n_cell = sim_data$n_cell
g_g = sim_data$g_g
c_c = sim_data$c_c
exp_raw = expression_mat
exp_wide = NULL
for (i in 1:n_group) {
for (j in 1:n_cell) {
exp_wide = cbind(exp_wide, t(exp_raw[i,,,j]))
}
}
colnames(exp_wide) = seq(1, n_group*n_sample*n_cell)
rownames(exp_wide) = seq(1, n_gene)
cell_names = c(rep(paste0("CONT_", 1:n_cell), each = n_sample),
rep(paste0("CASE_", 1:n_cell), each = n_sample))
meta = data.frame(cell.ident = cell_names)
rownames(meta) = seq(1, n_group*n_sample*n_cell)
mydata = CreateSeuratObject(counts = exp_wide, meta.data = meta)
Idents(mydata) = mydata$cell.ident
zz = array(NA, dim = c(1, n_gene, n_cell))
for (g in 1:n_gene) {
for (c in 1:n_cell) {
zz[1,g,c] = qnorm(pt(t.test(expression_mat[1,,g,c], expression_mat[2,,g,c])$statistic,
df = sum(length(expression_mat[1,,g,c]), length(expression_mat[2,,g,c]))))
}
}
MRF_results = getMRFDE_t_stats(zz, n_cell, n_gene, c_c, g_g,
nulltype = 1, df = 15, iterEM = 2,
iterGibbsPost = 100, brPost = 50)
MRF_results$paraMRF
random.seed = 2021
.libPaths("/gpfs/loomis/pi/zhao2/hl732/R_pkgs")
suppressMessages(library(pscl))
suppressMessages(library(scDD))
suppressMessages(library(locfdr))
suppressMessages(library(Seurat))
suppressMessages(library(extraDistr))
suppressMessages(library(BiocParallel))
suppressMessages(library(SingleCellExperiment))
source("../functions/mrf_functions.R")
source("../functions/sim_functions.R")
load("../data/cell_cell.RData")
load("../data/gene_exp_params.RData")
alpha_inf = gene_exp_params$alpha_inf
beta_inf = gene_exp_params$beta_inf
alpha_disp = gene_exp_params$alpha_disp
beta_disp = gene_exp_params$beta_disp
alpha_mean = gene_exp_params$alpha_mean
beta_mean = gene_exp_params$beta_mean
n_gene = 200
n_cell = 18
rate = 0.4
taus = c(2, 1/2)
de_proportion = 0.2
g_g = matrix(1, n_gene, n_gene)
conn = rbinom(sum(lower.tri(g_g)), 1, rate)
g_g[lower.tri(g_g)] = conn
g_g <- t(g_g)
g_g[lower.tri(g_g)] = conn
diag(g_g) = 0
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(100, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(50, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(80, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(90, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
random.seed = 2021
.libPaths("/gpfs/loomis/pi/zhao2/hl732/R_pkgs")
suppressMessages(library(pscl))
suppressMessages(library(scDD))
suppressMessages(library(locfdr))
suppressMessages(library(Seurat))
suppressMessages(library(extraDistr))
suppressMessages(library(BiocParallel))
suppressMessages(library(SingleCellExperiment))
source("../functions/mrf_functions.R")
source("../functions/sim_functions.R")
load("../data/cell_cell.RData")
load("../data/gene_exp_params.RData")
alpha_inf = gene_exp_params$alpha_inf
beta_inf = gene_exp_params$beta_inf
alpha_disp = gene_exp_params$alpha_disp
beta_disp = gene_exp_params$beta_disp
alpha_mean = gene_exp_params$alpha_mean
beta_mean = gene_exp_params$beta_mean
n_gene = 200
n_cell = 18
rate = 0.4
taus = c(2, 1/2)
de_proportion = 0.2
g_g = matrix(1, n_gene, n_gene)
conn = rbinom(sum(lower.tri(g_g)), 1, rate)
g_g[lower.tri(g_g)] = conn
g_g <- t(g_g)
g_g[lower.tri(g_g)] = conn
diag(g_g) = 0
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(90, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
rownames(sim_data$g_g) = paste0("G", seq(1,200))
colnames(sim_data$g_g) = paste0("G", seq(1,200))
rownames(sim_data$c_c) = paste0("C", seq(1,18))
colnames(sim_data$c_c) = paste0("C", seq(1,18))
data_example = list(expression_mat = sim_data$expression_mat,
gene_gene = sim_data$g_g,
cell_cell = sim_data$c_c)
save(data_example, file = "data_example.RData")
expression_mat = sim_data$expression_mat
n_group = sim_data$n_group
n_sample = sim_data$n_sample
n_gene = sim_data$n_gene
n_cell = sim_data$n_cell
g_g = sim_data$g_g
c_c = sim_data$c_c
exp_raw = expression_mat
exp_wide = NULL
for (i in 1:n_group) {
for (j in 1:n_cell) {
exp_wide = cbind(exp_wide, t(exp_raw[i,,,j]))
}
}
colnames(exp_wide) = seq(1, n_group*n_sample*n_cell)
rownames(exp_wide) = seq(1, n_gene)
cell_names = c(rep(paste0("CONT_", 1:n_cell), each = n_sample),
rep(paste0("CASE_", 1:n_cell), each = n_sample))
meta = data.frame(cell.ident = cell_names)
rownames(meta) = seq(1, n_group*n_sample*n_cell)
mydata = CreateSeuratObject(counts = exp_wide, meta.data = meta)
Idents(mydata) = mydata$cell.ident
zz = array(NA, dim = c(1, n_gene, n_cell))
for (g in 1:n_gene) {
for (c in 1:n_cell) {
zz[1,g,c] = qnorm(pt(t.test(expression_mat[1,,g,c], expression_mat[2,,g,c])$statistic,
df = sum(length(expression_mat[1,,g,c]), length(expression_mat[2,,g,c]))))
}
}
MRF_results = getMRFDE_t_stats(zz, n_cell, n_gene, c_c, g_g,
nulltype = 1, df = 15, iterEM = 2,
iterGibbsPost = 100, brPost = 50)
MRF_results$paraMRF
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(85, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(80, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
random.seed = 2021
.libPaths("/gpfs/loomis/pi/zhao2/hl732/R_pkgs")
suppressMessages(library(pscl))
suppressMessages(library(scDD))
suppressMessages(library(locfdr))
suppressMessages(library(Seurat))
suppressMessages(library(extraDistr))
suppressMessages(library(BiocParallel))
suppressMessages(library(SingleCellExperiment))
source("../functions/mrf_functions.R")
source("../functions/sim_functions.R")
load("../data/cell_cell.RData")
load("../data/gene_exp_params.RData")
alpha_inf = gene_exp_params$alpha_inf
beta_inf = gene_exp_params$beta_inf
alpha_disp = gene_exp_params$alpha_disp
beta_disp = gene_exp_params$beta_disp
alpha_mean = gene_exp_params$alpha_mean
beta_mean = gene_exp_params$beta_mean
n_gene = 200
n_cell = 18
rate = 0.4
taus = c(2, 1/2)
de_proportion = 0.2
g_g = matrix(1, n_gene, n_gene)
conn = rbinom(sum(lower.tri(g_g)), 1, rate)
g_g[lower.tri(g_g)] = conn
g_g <- t(g_g)
g_g[lower.tri(g_g)] = conn
diag(g_g) = 0
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(80, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
rownames(sim_data$g_g) = paste0("G", seq(1,200))
colnames(sim_data$g_g) = paste0("G", seq(1,200))
rownames(sim_data$c_c) = paste0("C", seq(1,18))
colnames(sim_data$c_c) = paste0("C", seq(1,18))
data_example = list(expression_mat = sim_data$expression_mat,
gene_gene = sim_data$g_g,
cell_cell = sim_data$c_c)
save(data_example, file = "data_example.RData")
expression_mat = sim_data$expression_mat
n_group = sim_data$n_group
n_sample = sim_data$n_sample
n_gene = sim_data$n_gene
n_cell = sim_data$n_cell
g_g = sim_data$g_g
c_c = sim_data$c_c
exp_raw = expression_mat
exp_wide = NULL
for (i in 1:n_group) {
for (j in 1:n_cell) {
exp_wide = cbind(exp_wide, t(exp_raw[i,,,j]))
}
}
colnames(exp_wide) = seq(1, n_group*n_sample*n_cell)
rownames(exp_wide) = seq(1, n_gene)
cell_names = c(rep(paste0("CONT_", 1:n_cell), each = n_sample),
rep(paste0("CASE_", 1:n_cell), each = n_sample))
meta = data.frame(cell.ident = cell_names)
rownames(meta) = seq(1, n_group*n_sample*n_cell)
mydata = CreateSeuratObject(counts = exp_wide, meta.data = meta)
Idents(mydata) = mydata$cell.ident
zz = array(NA, dim = c(1, n_gene, n_cell))
for (g in 1:n_gene) {
for (c in 1:n_cell) {
zz[1,g,c] = qnorm(pt(t.test(expression_mat[1,,g,c], expression_mat[2,,g,c])$statistic,
df = sum(length(expression_mat[1,,g,c]), length(expression_mat[2,,g,c]))))
}
}
MRF_results = getMRFDE_t_stats(zz, n_cell, n_gene, c_c, g_g,
nulltype = 1, df = 15, iterEM = 2,
iterGibbsPost = 100, brPost = 50)
MRF_results$paraMRF
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(95, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
random.seed = 2021
.libPaths("/gpfs/loomis/pi/zhao2/hl732/R_pkgs")
suppressMessages(library(pscl))
suppressMessages(library(scDD))
suppressMessages(library(locfdr))
suppressMessages(library(Seurat))
suppressMessages(library(extraDistr))
suppressMessages(library(BiocParallel))
suppressMessages(library(SingleCellExperiment))
source("../functions/mrf_functions.R")
source("../functions/sim_functions.R")
load("../data/cell_cell.RData")
load("../data/gene_exp_params.RData")
alpha_inf = gene_exp_params$alpha_inf
beta_inf = gene_exp_params$beta_inf
alpha_disp = gene_exp_params$alpha_disp
beta_disp = gene_exp_params$beta_disp
alpha_mean = gene_exp_params$alpha_mean
beta_mean = gene_exp_params$beta_mean
n_gene = 200
n_cell = 18
rate = 0.4
taus = c(2, 1/2)
de_proportion = 0.2
g_g = matrix(1, n_gene, n_gene)
conn = rbinom(sum(lower.tri(g_g)), 1, rate)
g_g[lower.tri(g_g)] = conn
g_g <- t(g_g)
g_g[lower.tri(g_g)] = conn
diag(g_g) = 0
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(95, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
rownames(sim_data$g_g) = paste0("G", seq(1,200))
colnames(sim_data$g_g) = paste0("G", seq(1,200))
rownames(sim_data$c_c) = paste0("C", seq(1,18))
colnames(sim_data$c_c) = paste0("C", seq(1,18))
data_example = list(expression_mat = sim_data$expression_mat,
gene_gene = sim_data$g_g,
cell_cell = sim_data$c_c)
save(data_example, file = "data_example.RData")
expression_mat = sim_data$expression_mat
n_group = sim_data$n_group
n_sample = sim_data$n_sample
n_gene = sim_data$n_gene
n_cell = sim_data$n_cell
g_g = sim_data$g_g
c_c = sim_data$c_c
exp_raw = expression_mat
exp_wide = NULL
for (i in 1:n_group) {
for (j in 1:n_cell) {
exp_wide = cbind(exp_wide, t(exp_raw[i,,,j]))
}
}
colnames(exp_wide) = seq(1, n_group*n_sample*n_cell)
rownames(exp_wide) = seq(1, n_gene)
cell_names = c(rep(paste0("CONT_", 1:n_cell), each = n_sample),
rep(paste0("CASE_", 1:n_cell), each = n_sample))
meta = data.frame(cell.ident = cell_names)
rownames(meta) = seq(1, n_group*n_sample*n_cell)
mydata = CreateSeuratObject(counts = exp_wide, meta.data = meta)
Idents(mydata) = mydata$cell.ident
zz = array(NA, dim = c(1, n_gene, n_cell))
for (g in 1:n_gene) {
for (c in 1:n_cell) {
zz[1,g,c] = qnorm(pt(t.test(expression_mat[1,,g,c], expression_mat[2,,g,c])$statistic,
df = sum(length(expression_mat[1,,g,c]), length(expression_mat[2,,g,c]))))
}
}
MRF_results = getMRFDE_t_stats(zz, n_cell, n_gene, c_c, g_g,
nulltype = 1, df = 15, iterEM = 2,
iterGibbsPost = 100, brPost = 50)
MRF_results$paraMRF
random.seed = 2021
.libPaths("/gpfs/loomis/pi/zhao2/hl732/R_pkgs")
suppressMessages(library(pscl))
suppressMessages(library(scDD))
suppressMessages(library(locfdr))
suppressMessages(library(Seurat))
suppressMessages(library(extraDistr))
suppressMessages(library(BiocParallel))
suppressMessages(library(SingleCellExperiment))
source("../functions/mrf_functions.R")
source("../functions/sim_functions.R")
load("../data/cell_cell.RData")
load("../data/gene_exp_params.RData")
alpha_inf = gene_exp_params$alpha_inf
beta_inf = gene_exp_params$beta_inf
alpha_disp = gene_exp_params$alpha_disp
beta_disp = gene_exp_params$beta_disp
alpha_mean = gene_exp_params$alpha_mean
beta_mean = gene_exp_params$beta_mean
n_gene = 200
n_cell = 18
rate = 0.2
taus = c(2, 1/2)
de_proportion = 0.4
g_g = matrix(1, n_gene, n_gene)
conn = rbinom(sum(lower.tri(g_g)), 1, rate)
g_g[lower.tri(g_g)] = conn
g_g <- t(g_g)
g_g[lower.tri(g_g)] = conn
diag(g_g) = 0
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(95, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(50, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(30, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(10, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(15, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
random.seed = 2021
.libPaths("/gpfs/loomis/pi/zhao2/hl732/R_pkgs")
suppressMessages(library(pscl))
suppressMessages(library(scDD))
suppressMessages(library(locfdr))
suppressMessages(library(Seurat))
suppressMessages(library(extraDistr))
suppressMessages(library(BiocParallel))
suppressMessages(library(SingleCellExperiment))
source("../functions/mrf_functions.R")
source("../functions/sim_functions.R")
load("../data/cell_cell.RData")
load("../data/gene_exp_params.RData")
alpha_inf = gene_exp_params$alpha_inf
beta_inf = gene_exp_params$beta_inf
alpha_disp = gene_exp_params$alpha_disp
beta_disp = gene_exp_params$beta_disp
alpha_mean = gene_exp_params$alpha_mean
beta_mean = gene_exp_params$beta_mean
n_gene = 200
n_cell = 18
rate = 0.2
taus = c(2, 1/2)
de_proportion = 0.4
g_g = matrix(1, n_gene, n_gene)
conn = rbinom(sum(lower.tri(g_g)), 1, rate)
g_g[lower.tri(g_g)] = conn
g_g <- t(g_g)
g_g[lower.tri(g_g)] = conn
diag(g_g) = 0
sim_data = get_sim_data(de_proportion = de_proportion,
taus = taus, c_c = cell_cell, g_g = g_g,
alpha_inf = alpha_inf, beta_inf = beta_inf,
alpha_disp = alpha_disp, beta_disp = beta_disp,
alpha_mean = alpha_mean, beta_mean = beta_mean,
paraMRF = c(15, 2, 1), n_sample = 200)
sum(sim_data$states)
sum(sim_data$statesI)
rownames(sim_data$g_g) = paste0("G", seq(1,200))
colnames(sim_data$g_g) = paste0("G", seq(1,200))
rownames(sim_data$c_c) = paste0("C", seq(1,18))
colnames(sim_data$c_c) = paste0("C", seq(1,18))
data_example = list(expression_mat = sim_data$expression_mat,
gene_gene = sim_data$g_g,
cell_cell = sim_data$c_c)
save(data_example, file = "data_example.RData")
expression_mat = sim_data$expression_mat
n_group = sim_data$n_group
n_sample = sim_data$n_sample
n_gene = sim_data$n_gene
n_cell = sim_data$n_cell
g_g = sim_data$g_g
c_c = sim_data$c_c
exp_raw = expression_mat
exp_wide = NULL
for (i in 1:n_group) {
for (j in 1:n_cell) {
exp_wide = cbind(exp_wide, t(exp_raw[i,,,j]))
}
}
colnames(exp_wide) = seq(1, n_group*n_sample*n_cell)
rownames(exp_wide) = seq(1, n_gene)
cell_names = c(rep(paste0("CONT_", 1:n_cell), each = n_sample),
rep(paste0("CASE_", 1:n_cell), each = n_sample))
meta = data.frame(cell.ident = cell_names)
rownames(meta) = seq(1, n_group*n_sample*n_cell)
mydata = CreateSeuratObject(counts = exp_wide, meta.data = meta)
Idents(mydata) = mydata$cell.ident
zz = array(NA, dim = c(1, n_gene, n_cell))
for (g in 1:n_gene) {
for (c in 1:n_cell) {
zz[1,g,c] = qnorm(pt(t.test(expression_mat[1,,g,c], expression_mat[2,,g,c])$statistic,
df = sum(length(expression_mat[1,,g,c]), length(expression_mat[2,,g,c]))))
}
}
MRF_results = getMRFDE_t_stats(zz, n_cell, n_gene, c_c, g_g,
nulltype = 1, df = 15, iterEM = 2,
iterGibbsPost = 100, brPost = 50)
MRF_results$paraMRF
setwd("~/Documents/GitHub/MRFscRNAseq/vignettes")
setwd("~/Documents/GitHub/MRFscRNAseq/R")
load("../../data_example.RData")
usethis::use_data(data_example)
library(MRFscRNAseq)
get_DE_MRF()
data = data_example
get_z_scores(data)
get_DE_results(MRF_Results, alpha = 0.05)
