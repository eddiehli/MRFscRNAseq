dat = read_csv("PScore Data.csv")
library(tidyverse)
dat = read_csv("PScore Data.csv")
dat = read_csv("PScore Data.csv")
dat = read_csv("./PScore Data.csv")
head(dat)
table(dat$appendectomy)
table(dat$mortality_30day)
table(dat$readmission_30day)
24+16+20+11+13+16+17+19+42+23+25+32+32+34+35
9/359
sqrt(0.0076)
0.807-1.96*0.08717798
0.807+1.96*0.08717798
21*21*2*(42-2)/42/42/41
9/24
7/24
1-(1-0.05)^2
1-(1-0.05)^3
1-(1-0.05)^4
0.0154/0:0167
0.0154/0.0167
0.0154*0.0167
0.0167/0.0154
0.0804/0.0167
0.0804*0.0167
0.0804/3
0.0154/3
0.0154*3
0.0804*3
?glm
x = rnorm(1000, 1, 3)
z = rnorm(1000, 2, 4)
y = 2*x + 3*z + rnorm(1000, 0, 2)
lm(y ~ x + z)
anova(lm(y ~ x + z))
anova(lm(y ~ z + x))
anova(lm(y ~ z))
anova(lm(y ~ x))
wilcox.test(c(2,4,9,10,5,7,-5,-6), alternative="two.side", correct = FALSE, mu = 8)
wilcox.test(c(2,4,9,10,5,7,-6), alternative="two.side", correct = FALSE, mu = 8)
wilcox.test(c(2,4,9,10,5,7\), alternative="two.side", correct = FALSE, mu = 8)
wilcox.test(c(2,4,9,10,5,7), alternative="two.side", correct = FALSE, mu = 8)
wilcox.test(c(2,4,9,10,5,7,-5,-6), alternative="two.side", correct = FALSE, mu = 5)
wilcox.test(c(2,4,9,10,7,-5,-6), alternative="two.side", correct = FALSE, mu = 5)
0.3438*2
?wilcox.test
wilcox.test(x=c(85,70,40,65),y=c(75,50,50,40),paired = TRUE)
wilcox.test(x=c(85,70,40,65,75),y=c(75,50,50,40,65),paired = TRUE)
wilcox.test(x=c(10,20,10,60,5),y=c(5,10,25,40,30),paired = TRUE)
0.3125*2
wilcox.test(x=c(10,20,60,5,20), y=c(5,10,40,30,4), paired = TRUE, correct = FALSE)
wilcox.test(x=c(10,20,60,5,20), y=c(5,10,40,30,4), paired = TRUE, correct = FALSE, mu = 8)
wilcox.test(x=c(10,20,60,5,20), y=c(5,10,40,30,4), paired = TRUE, correct = FALSE, mu = 10)
wilcox.test(x=c(10,20,60,5,20), y=c(5,10,40,30,4), paired = TRUE, correct = FALSE, mu = 5)
wilcox.test(x=c(10,20,60,5,20), y=c(5,10,40,30,4), paired = TRUE, correct = FALSE, mu = 16)
wilcox.test(x=c(10,20,60,5,20), y=c(5,10,40,30,4), paired = TRUE, correct = FALSE, mu = 14)
x=c(10,20,60,5,20)y=c(5,10,40,30,4)
x=c(10,20,60,5,20)
y=c(5,10,40,30,4)
z=x-y
mean(z)
var(z)
sqrt(5)*5.2
sqrt(5)*5.2/sqrt(317.7)
t.test(z)
sqrt(5)*(5.2-5)/sqrt(317.7)
?t.test
t.test(x=c(10,20,60,5,20), y=c(5,10,40,30,4), paired = TRUE, correct = FALSE, mu = 0)
t.test(x=c(10,20,60,5,20), y=c(5,10,40,30,4), paired = TRUE, correct = FALSE, mu = 5)
t.test(x=c(10,20,60,5,20), y=c(5,10,40,30,4), paired = TRUE, correct = FALSE, mu = 15)
t.test(x=c(10,20,60,5,20), y=c(5,10,40,30,4), paired = TRUE, correct = FALSE, mu = 20)
t.test(x=c(10,20,60,5,20), y=c(5,10,40,30,4), paired = TRUE, correct = FALSE, mu = 25)
sqrt(5)*(5.2-25)/sqrt(317.7)
t.test(c(1,2,3,4,5))
x = c(1,2,3,4,5)
var(x)
(1-3)^2+(2-3)^2+(3-3)^2+(4-3)^2+(5-3)^2
(1-3)^2+(2-3)^2+(3-3)^2+(4-3)^2+(5-3)^2/(5-1)
((1-3)^2+(2-3)^2+(3-3)^2+(4-3)^2+(5-3)^2)/(5-1)
install.packages("coin")
install.packages("rcompanion")
library(rcompanion)
tinytex::reinstall_tinytex()
install.packages("devtools")
install.packages("roxygen2")
setwd("~/Google Drive/Research/MRF_scRNA")
devtools::create("MRF_scRNAseq")
devtools::create("MRFscRNAseq")
devtools::document()
devtools::document()
setwd("~/Google Drive/Research/MRF_scRNA/MRFscRNAseq/R")
devtools::document()
libarary(locfdr)
library(locfdr)
?locfdr
setwd("~/Google Drive/Research/MRF_scRNA")
devtools::create("MRFscRNAseq")
devtools::document()
setwd("~/Google Drive/Research/MRF_scRNA/MRFscRNAseq/R")
setwd("~/Google Drive/Research/MRF_scRNA/MRFscRNAseq/R")
devtools::document()
?rgama
?rgamma
get_sim_data = function(gg_info, gamma_alpha, gamma_beta, tau, random.seed) {
# Set Random Seed
set.seed(random.seed)
# G_G Matrix
g_g = gg_info$g_g
gene_names_DE = gg_info$gene_names_DE
gene_names_EE = gg_info$gene_names_EE
gene_names_all = gg_info$gene_names_all
n_gene = dim(g_g)[1]
de_gene_index = which(rownames(g_g) %in% gene_names_DE)
# DE Genes and Cell Types
n_de_gene = length(gene_names_DE)
n_de_cell = 10
# C_C Matrix
n_cell = 20
c_c = matrix(0, nrow = n_cell, ncol = n_cell)
c_c[1:n_de_cell, 1:n_de_cell] = 1
de_cell_index = 1:n_de_cell
# Latent States
statesI = array(0, dim = c(1, n_gene, n_cell))
statesI[1, de_gene_index, de_cell_index] = 1
sum(statesI)
sum(statesI[1,1:length(gene_names_DE),1:10])
paraMRF = c(194, 0.2, 0.4)
gamma = paraMRF[1]; beta_gene = paraMRF[2]; beta_cell = paraMRF[3]
iter = 10
states = array(NA, dim = c(1, n_gene, n_cell))
for (it in 1:iter) {
for (g in 1:n_gene) {
for (c in 1:n_cell) {
a = gamma + beta_gene*sum(statesI[1,,c]*g_g[g,]) + beta_cell*sum(statesI[1,g,]*c_c[c,])
b = beta_gene*sum(1-statesI[1,,c]*g_g[g,]) + beta_cell*sum(1-statesI[1,g,]*c_c[c,])
prob = exp(a)/(exp(a)+ exp(b))
states[1,g,c] <- (prob >= runif(length(prob))) + 0
}
}
}
sum(states)
sum(states[1,1:length(gene_names_DE),1:10])
# Generate Expression Matrix
n_group = 2
n_sample = 100
expression_mat = array(NA, dim = c(n_group, n_sample, n_gene, n_cell))
for (g in 1:n_gene) {
for (c in 1:n_cell) {
mu = rgamma(1, gamma_alpha, gamma_beta)
disp = 0.1
expression_mat[1,,g,c] = rnbinom(n_sample, mu = mu, size = disp)
if (states[1,g,c] == 1) {
lambda = sample(c(1/tau, tau), 1, prob = c(0.5, 0.5), replace = T)
expression_mat[2,,g,c] = rnbinom(n_sample, mu = lambda*mu, size = lambda*disp)
} else {
expression_mat[2,,g,c] = rnbinom(n_sample, mu = mu, size = disp)
}
}
}
sim_data = list(expression_mat = expression_mat,
n_group = n_group, n_sample = n_sample,
n_gene = n_gene, n_cell = n_cell, g_g = g_g, c_c = c_c,
n_de_gene = n_de_gene, n_de_cell = n_de_cell)
return(sim_data)
}
suppressMessages(library(locfdr))
suppressMessages(library(pscl))
source("GET_DE_MRF.R")
source("GET_SIM_DATA.R")
source("GET_SIM_RESULTS.R")
suppressMessages(library(locfdr))
suppressMessages(library(pscl))
source("GET_DE_MRF.R")
source("GET_SIM_DATA.R")
source("GET_SIM_RESULTS.R")
suppressMessages(library(locfdr))
suppressMessages(library(pscl))
source("GET_DE_MRF.R")
source("GET_SIM_DATA.R")
source("GET_SIM_RESULTS.R")
gg_info = readRDS("./data/gg_sim_v1.rds")
sim_data = get_sim_data(gg_info, gamma_alpha = 3, gamma_beta = 4, tau = 5, random.seed = 2020)
sim_data
expression_mat = get_sim_data(gg_info, gamma_alpha = 3, gamma_beta = 4, tau = 5, random.seed = 2020)
expression_mat
data = get_sim_data(gg_info, gamma_alpha = 3, gamma_beta = 4, tau = 5, random.seed = 2020)
get_noMRF_results(data)
data
expression_mat = data$expression_mat
n_gene = data$n_gene
n_cell = data$n_cell
n_de_gene = data$n_de_gene
n_de_cell = data$n_de_cell
p_vals = matrix(NA, nrow = n_gene, ncol = n_cell)
for (g in 1:n_gene) for (c in 1:n_cell) p_vals[g,c] = t.test(expression_mat[1,,g,c], expression_mat[2,,g,c])$p.value
p_vals_adj = matrix(p.adjust(p_vals, method = "BH"), nrow = n_gene, ncol = n_cell)
total_DE_genes_mat = which(p_vals_adj < alpha, arr.ind = TRUE)
alpha = 0.01
get_noMRF_results = function(data, alpha = 0.01) {
expression_mat = data$expression_mat
n_gene = data$n_gene
n_cell = data$n_cell
n_de_gene = data$n_de_gene
n_de_cell = data$n_de_cell
p_vals = matrix(NA, nrow = n_gene, ncol = n_cell)
for (g in 1:n_gene) for (c in 1:n_cell) p_vals[g,c] = t.test(expression_mat[1,,g,c], expression_mat[2,,g,c])$p.value
p_vals_adj = matrix(p.adjust(p_vals, method = "BH"), nrow = n_gene, ncol = n_cell)
total_DE_genes_mat = which(p_vals_adj < alpha, arr.ind = TRUE)
total_DE_genes_identified = dim(which(p_vals_adj < alpha, arr.ind = TRUE))[1]
DE_genes_true_discovery = 0
for (i in 1:total_DE_genes_identified){
if (total_DE_genes_mat[i,][1] <= n_de_gene && total_DE_genes_mat[i,][2] <= n_de_cell) {
DE_genes_true_discovery = DE_genes_true_discovery + 1
}
}
DE_genes_false_discovery = total_DE_genes_identified - DE_genes_true_discovery
# Sensitivity
sensitivity = round(DE_genes_true_discovery/(n_de_gene*n_de_cell), 4)
# Specificity
specificity = round((n_gene*n_cell - n_de_gene*n_de_cell - DE_genes_false_discovery)/(n_gene*n_cell - n_de_gene*n_de_cell), 4)
# FDR
fdr = round(DE_genes_false_discovery/total_DE_genes_identified, 4)
noMRF_results = c(sensitivity, specificity, fdr)
return(noMRF_results)
}
get_noMRF_MAST_results = function(data, alpha = 0.01) {
expression_mat = data$expression_mat
n_gene = data$n_gene
n_cell = data$n_cell
n_de_gene = data$n_de_gene
n_de_cell = data$n_de_cell
p_vals = matrix(NA, nrow = n_gene, ncol = n_cell)
for(c in 1:n_cell){
for (g in 1:n_gene) {
reg.data = data.frame(y = c(expression_mat[1,,g,c], expression_mat[2,,g,c]), x = c(rep(0,100), rep(1,100)))
reg.model = hurdle(y ~ x, data = reg.data, dist = "negbin", zero.dist = "poisson")
reg.summary = summary(reg.model)
x = reg.summary$coefficients$count[2,3]
y = reg.summary$coefficients$zero[2,3]
if (is.na(x) == TRUE) { x = 0 }
if (is.na(y) == TRUE) { y = 0 }
test_stat = x^2 + y^2
p_val = 1 - pchisq(test_stat, 2)
p_vals[g,c] = p_val
}
}
p_vals_adj = matrix(p.adjust(p_vals, method = "BH"), nrow = n_gene, ncol = n_cell)
total_DE_genes_mat = which(p_vals_adj < alpha, arr.ind = TRUE)
total_DE_genes_identified = dim(which(p_vals_adj < alpha, arr.ind = TRUE))[1]
DE_genes_true_discovery = 0
for (i in 1:total_DE_genes_identified){
if (total_DE_genes_mat[i,][1] <= n_de_gene && total_DE_genes_mat[i,][2] <= n_de_cell) {
DE_genes_true_discovery = DE_genes_true_discovery + 1
}
}
DE_genes_false_discovery = total_DE_genes_identified - DE_genes_true_discovery
# Sensitivity
sensitivity = round(DE_genes_true_discovery/(n_de_gene*n_de_cell), 4)
# Specificity
specificity = round((n_gene*n_cell - n_de_gene*n_de_cell - DE_genes_false_discovery)/(n_gene*n_cell - n_de_gene*n_de_cell), 4)
# FDR
fdr = round(DE_genes_false_discovery/total_DE_genes_identified, 4)
noMRF_MAST_results = c(sensitivity, specificity, fdr)
return(noMRF_MAST_results)
}
get_MRF_results = function(data, alpha = 0.01) {
expression_mat = data$expression_mat
n_gene = data$n_gene
n_cell = data$n_cell
n_de_gene = data$n_de_gene
n_de_cell = data$n_de_cell
zz = array(NA, dim = c(1, n_gene, n_cell))
for (g in 1:n_gene) for (c in 1:n_cell) zz[1,g,c] = qnorm(pt(t.test(expression_mat[1,,g,c], expression_mat[2,,g,c])$statistic,
df = sum(length(expression_mat[1,,g,c]), length(expression_mat[2,,g,c]))))
MRFDE_results = getMRFDE(data = zz, c_c, g_g)
q_sorted = sort(as.vector(1-MRFDE_results$postDE), decreasing = F)
index = which.min((cumsum(q_sorted)/seq(1, n_gene*n_cell, by = 1) <= alpha) == TRUE)
posterior.threshold = 1 - q_sorted[index]
posterior.threshold
results_postDE = matrix(MRFDE_results$postDE, nrow = n_gene, ncol = n_cell)
total_DE_genes_mat = which(results_postDE > posterior.threshold, arr.ind = T)
total_DE_genes_identified = length(which(results_postDE > posterior.threshold))
DE_genes_true_discovery = 0
for (i in 1:total_DE_genes_identified){
if (total_DE_genes_mat[i,][1] <= n_de_gene && total_DE_genes_mat[i,][2] <= n_de_cell) {
DE_genes_true_discovery = DE_genes_true_discovery + 1
}
}
DE_genes_false_discovery = total_DE_genes_identified - DE_genes_true_discovery
# Sensitivity
sensitivity = round(DE_genes_true_discovery/(n_de_gene*n_de_cell), 4)
# Specificity
specificity = round((n_gene*n_cell - n_de_gene*n_de_cell - DE_genes_false_discovery)/(n_gene*n_cell - n_de_gene*n_de_cell), 4)
# FDR
fdr = round(DE_genes_false_discovery/total_DE_genes_identified, 4)
MRF_results = c(sensitivity, specificity, fdr)
return(MRF_results)
}
get_noMRF_results(data)
get_noMRF_MAST_results(data)
warnings()
get_MRF_results(data)
source("GET_DE_MRF.R")
source("GET_SIM_DATA.R")
source("GET_SIM_RESULTS.R")
gg_info = readRDS("./data/gg_sim_v1.rds")
data = get_sim_data(gg_info, gamma_alpha = 2, gamma_beta = 4, tau = 5, random.seed = 2020)
get_noMRF_results(data)
get_noMRF_MAST_results(data)
get_MRF_results(data)
?getMRFDE
View(getMRFDE)
View(getMRFDE)
expression_mat = data$expression_mat
n_group = data$n_group
n_sample = data$n_sample
n_gene = data$n_gene
n_cell = data$n_cell
n_de_gene = data$n_de_gene
n_de_cell = data$n_de_cell
g_g = data$g_g
c_c = data$c_c
zz = array(NA, dim = c(1, n_gene, n_cell))
for (g in 1:n_gene) for (c in 1:n_cell) zz[1,g,c] = qnorm(pt(t.test(expression_mat[1,,g,c], expression_mat[2,,g,c])$statistic,
df = sum(length(expression_mat[1,,g,c]), length(expression_mat[2,,g,c]))))
MRFDE_results = getMRFDE(data = zz, c_c, g_g)
zz
dim(zz)
source("GET_DE_MRF.R")
source("GET_SIM_DATA.R")
source("GET_SIM_RESULTS.R")
gg_info = readRDS("./data/gg_sim_v1.rds")
data = get_sim_data(gg_info, gamma_alpha = 2, gamma_beta = 4, tau = 5, random.seed = 2020)
get_noMRF_results(data)
get_MRF_results(data)
source("GET_DE_MRF.R")
source("GET_SIM_DATA.R")
source("GET_SIM_RESULTS.R")
gg_info = readRDS("./data/gg_sim_v1.rds")
data = get_sim_data(gg_info, gamma_alpha = 2, gamma_beta = 4, tau = 5, random.seed = 2020)
get_MRF_results(data)
expression_mat = data$expression_mat
n_group = data$n_group
n_sample = data$n_sample
n_gene = data$n_gene
n_cell = data$n_cell
n_de_gene = data$n_de_gene
n_de_cell = data$n_de_cell
g_g = data$g_g
c_c = data$c_c
zz = array(NA, dim = c(1, n_gene, n_cell))
for (g in 1:n_gene) for (c in 1:n_cell) zz[1,g,c] = qnorm(pt(t.test(expression_mat[1,,g,c], expression_mat[2,,g,c])$statistic,
df = sum(length(expression_mat[1,,g,c]), length(expression_mat[2,,g,c]))))
getMRFDE(data = zz, c_c, g_g, n_gene, n_cell)
get_MRF_results(data)
source("GET_DE_MRF.R")
source("GET_SIM_DATA.R")
source("GET_SIM_RESULTS.R")
gg_info = readRDS("./data/gg_sim_v1.rds")
data = get_sim_data(gg_info, gamma_alpha = 2, gamma_beta = 4, tau = 5, random.seed = 2020)
get_MRF_results(data)
source("GET_DE_MRF.R")
source("GET_SIM_DATA.R")
source("GET_SIM_RESULTS.R")
gg_info = readRDS("./data/gg_sim_v1.rds")
data = get_sim_data(gg_info, gamma_alpha = 2, gamma_beta = 4, tau = 5, random.seed = 2020)
get_MRF_results(data)
source("GET_DE_MRF.R")
source("GET_SIM_DATA.R")
source("GET_SIM_RESULTS.R")
gg_info = readRDS("./data/gg_sim_v1.rds")
data = get_sim_data(gg_info, gamma_alpha = 2, gamma_beta = 4, tau = 5, random.seed = 2020)
get_MRF_results(data, alpha = 0.01)
source("GET_DE_MRF.R")
source("GET_SIM_DATA.R")
source("GET_SIM_RESULTS.R")
gg_info = readRDS("./data/gg_sim_v1.rds")
data = get_sim_data(gg_info, gamma_alpha = 2, gamma_beta = 4, tau = 5, random.seed = 2020)
get_MRF_results(data, alpha = 0.01)
setwd("~/Google Drive/Research/MRF_scRNA/MRFscRNAseq/R")
setwd("~/Google Drive/Research/MRF_scRNA/MRFscRNAseq")
gg_info = readRDS("./data/gg_sim_v1.rds")
gg_info
gg_info = readRDS("./R/data/gg_sim_v1.rds")
devtools::use_data(gg_info)
usethis::use_data(gg_info)
gg_info = readRDS("./R/data/gg_sim_v1.rds")
usethis::use_data(gg_info)
gg_info = readRDS("./R/data/gg_sim_v1.rds")
usethis::use_data(gg_info)
devtools::use_vignette("introduction")
usethis::use_vignette("introduction")
usethat::use_vignette("introduction")
library(MRFscRNAseq)
library(devtools)
install_github("eddiehli/MRFscRNAseq")
install_github("eddiehli/MRFscRNAseq", force = TRUE)
install_github("eddiehli/MRFscRNAseq")
library(devtools)
install_github("eddiehli/MRFscRNAseq")
MRFscRNAseq
library(devtools)
install_github("eddiehli/MRFscRNAseq")
install_github("eddiehli/MRFscRNAseq", force = TRUE)
MRFscRNAseq::gg_info
setwd("~/Box/MRFscRNAseq/R")
setwd("~/Box/MRFscRNAseq")
usethis::use_vignette("introduction")
?install_github
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
library(devtools)
install_github("eddiehli/MRFscRNAseq", quiet = TRUE)
MRFscRNAseq::gg_info
gg_info = MRFscRNAseq::gg_info
gg_info$g_g[1:10, 1:10]
gg_info$g_g[10:11, 1:10]
gg_info$g_g[100:110, 1:10]
gg_info$g_g[100:110, 100:110]
?get_sim_data
?MRFscRNAseq::get_sim_data
